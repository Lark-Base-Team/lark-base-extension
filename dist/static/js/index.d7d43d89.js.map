{"version":3,"file":"static/js/index.d7d43d89.js","mappings":"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","sources":["webpack://text-formatter/./src/i18n/index.ts","webpack://text-formatter/./src/api/index.ts","webpack://text-formatter/./src/components/segment-render.tsx","webpack://text-formatter/./src/rx.ts","webpack://text-formatter/./src/components/result.tsx","webpack://text-formatter/./src/components/settings.tsx","webpack://text-formatter/./src/components/sider.tsx","webpack://text-formatter/./src/App.tsx","webpack://text-formatter/data:text/javascript,window.__assetPrefix__ = '';"],"sourcesContent":["import { bitable } from '@lark-base-open/js-sdk';\nimport * as i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\ni18n.use(initReactI18next).init({\n  resources: {\n    zh: {\n      translation: {\n        no_space_around_full_width_punctuation:\n          '全角标点与其他字符之间不加空格',\n        no_space_between_num_dp: '度数、百分比与数字之间不需要增加空格',\n        space_between_ch_en: '中文和英文、数字之间需要增加空格',\n        uniform_punctuation: '统一标点符号',\n        content: '问题内容',\n        view: '查看',\n        fix: '修复',\n        fix_all: '全部修复',\n        actions: '操作',\n        refresh: '刷新',\n        format_target: '排版范围',\n        format_rule: '排版规则',\n        text_field_only: '请选择文本类型的字段',\n        cell: '选中单元格',\n        field: '选中列',\n        fixing: '修复中',\n        fix_success: '修复成功',\n      },\n    },\n    en: {\n      translation: {\n        no_space_around_full_width_punctuation:\n          'No space around full-width punctuation',\n        no_space_between_num_dp:\n          'No space needed between numbers and degrees, percentages',\n        space_between_ch_en: 'Add space between Chinese and English, numbers',\n        uniform_punctuation: 'Uniform punctuation',\n        content: 'Content',\n        view: 'View',\n        fix: 'Fix',\n        fix_all: 'Fix All',\n        actions: 'Actions',\n        refresh: 'Refresh',\n        format_target: 'Formatting Scope',\n        format_rule: 'Formatting Rules',\n        text_field_only: 'Please select text type fields',\n        cell: 'Selected Cell',\n        field: 'Selected Column',\n        fixing: 'Fixing',\n        fix_success: 'Fix Successful',\n      },\n    },\n    ja: {\n      translation: {\n        no_space_around_full_width_punctuation:\n          '全角句読点の周りにスペースを入れない',\n        no_space_between_num_dp:\n          '数字と度数、パーセンテージの間にスペースは不要',\n        space_between_ch_en: '中国語と英語、数字の間にスペースを入れる',\n        uniform_punctuation: '句読点を統一する',\n        content: '内容',\n        view: '表示',\n        fix: '修正',\n        fix_all: 'すべて修正',\n        actions: '操作',\n        refresh: '更新',\n        format_target: '整形範囲',\n        format_rule: '整形ルール',\n        text_field_only: 'テキストフィールドのみを選択してください',\n        cell: '選択したセル',\n        field: '選択した列',\n        fixing: '修正中',\n        fix_success: '修正完了',\n      },\n    },\n  },\n  lng: 'zh',\n  fallbackLng: 'en',\n\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\nbitable.bridge.getLanguage().then(i18n.changeLanguage).finally(console.error);\n\nexport default i18n;\n","import { wrap } from 'comlink';\n\nconst worker = new Worker(new URL('./wasm-worker.ts', import.meta.url));\n\nconst RUST_API = wrap<{\n  module: Promise<Record<'fix' | 'test', (param: string) => Promise<string>>>;\n}>(worker).module;\n\nexport interface Config {\n  no_space_around_full_width_punctuation?: boolean;\n  no_space_between_num_dp?: boolean;\n  space_between_ch_en?: boolean;\n  uniform_punctuation?: boolean;\n}\n\nexport const CONFIG_LIST = [\n  'space_between_ch_en',\n  'no_space_between_num_dp',\n  'uniform_punctuation',\n  'no_space_around_full_width_punctuation',\n];\n\nexport interface Param {\n  config: Config;\n  texts: string[];\n}\n\nexport interface FixResult {\n  config: (keyof Config)[];\n  result: string[];\n}\n\nexport type TestResultItem = Array<[number, number]> | null;\n\nexport interface TestResult {\n  config: (keyof Config)[];\n  result: Array<TestResultItem>[];\n}\n\nexport const DEFAULT_CONFIG: Config = {\n  no_space_around_full_width_punctuation: true,\n  no_space_between_num_dp: true,\n  space_between_ch_en: true,\n  uniform_punctuation: true,\n};\n\nexport const fix = async (param: Param) =>\n  JSON.parse(await (await RUST_API).fix(JSON.stringify(param))) as FixResult;\n\nexport const test = async (param: Param) =>\n  JSON.parse(await (await RUST_API).test(JSON.stringify(param))) as TestResult;\n","/* eslint-disable react/no-array-index-key */\nimport { FC, useMemo } from 'react';\nimport Delta from 'quill-delta';\nimport { Tooltip } from '@arco-design/web-react';\nimport { useTranslation } from 'react-i18next';\nimport { CONFIG_LIST, TestResultItem } from '@/api';\n\nexport const SegmentRender: FC<{\n  text: string;\n  rulesResult: TestResultItem[];\n  configs: string[];\n}> = ({ text, rulesResult, configs }) => {\n  const { t } = useTranslation();\n\n  const deltas = useMemo(\n    () =>\n      rulesResult\n        .flatMap(\n          (item, index) =>\n            item?.map(([start, end]) =>\n              new Delta().retain(start).retain(end - start, {\n                [CONFIG_LIST.indexOf(configs[index])]: true,\n              }),\n            ) || [],\n        )\n        .reduce(\n          (prev, curr) => prev.compose(curr),\n          new Delta([{ insert: text }]),\n        ),\n    [text, rulesResult, configs],\n  );\n\n  return (\n    <>\n      {deltas.map((op, index) => {\n        if (typeof op.insert === 'string') {\n          const rules = Object.keys(op.attributes || {})\n            .filter(key => op.attributes?.[key])\n            .map(key => Number(key));\n          if (rules.length) {\n            return (\n              <Tooltip\n                key={index}\n                content={rules.map(rule => t(CONFIG_LIST[rule])).join('\\n')}\n              >\n                <span className=\"bg-red-200 border-b-2 border-red-600 cursor-pointer\">\n                  {op.insert}\n                </span>\n              </Tooltip>\n            );\n          }\n          return <span key={index}>{op.insert}</span>;\n        }\n        return null;\n      })}\n    </>\n  );\n};\n","/* eslint-disable max-nested-callbacks */\nimport {\n  BehaviorSubject,\n  distinctUntilChanged,\n  from,\n  fromEventPattern,\n  startWith,\n  switchMap,\n  merge,\n  map,\n  Observable,\n  combineLatest,\n  catchError,\n  of,\n  share,\n  EMPTY,\n} from 'rxjs';\nimport {\n  bitable,\n  FieldType,\n  Selection,\n  ToastType,\n} from '@lark-base-open/js-sdk';\nimport isEqual from 'lodash-es/isEqual';\nimport pick from 'lodash-es/pick';\nimport isEmpty from 'lodash-es/isEmpty';\nimport { Config, DEFAULT_CONFIG } from './api';\nimport i18n from './i18n';\n\nexport type Mode = 'cell' | 'field';\n\nexport const mode$ = new BehaviorSubject<Mode>('cell');\nbitable.bridge\n  .getData('mode')\n  .then(mode => {\n    if (mode && !isEmpty(mode)) {\n      mode$.next(mode as Mode);\n    }\n  })\n  .catch(console.error)\n  .finally(() =>\n    mode$.pipe(distinctUntilChanged()).subscribe(mode => {\n      bitable.bridge.setData('mode', mode).catch(console.error);\n    }),\n  );\n\nexport const config$ = new BehaviorSubject<Config>(DEFAULT_CONFIG);\nbitable.bridge\n  .getData('config')\n  .then(config => {\n    if (config && !isEmpty(config)) {\n      config$.next(config as Config);\n    }\n  })\n  .catch(console.error)\n  .finally(() =>\n    config$.pipe(distinctUntilChanged(isEqual)).subscribe(config => {\n      bitable.bridge.setData('config', config).catch(console.error);\n    }),\n  );\n\nexport const userSelection$: Observable<Selection> = from(\n  bitable.base.getSelection(),\n).pipe(\n  switchMap(selection =>\n    fromEventPattern<Selection>(\n      handler => bitable.base.onSelectionChange(({ data }) => handler(data)),\n      (_, signal) => signal(),\n    ).pipe(startWith(selection)),\n  ),\n  distinctUntilChanged(isEqual),\n);\n\nexport const selection$ = userSelection$.pipe(\n  map(({ tableId }) => tableId),\n  distinctUntilChanged(),\n  switchMap(tableId =>\n    from(bitable.base.getTableById(tableId!)).pipe(\n      switchMap(table =>\n        merge([\n          fromEventPattern(\n            handler => table.onFieldAdd(handler),\n            (_, signal) => signal(),\n          ),\n          fromEventPattern(\n            handler => table.onFieldModify(handler),\n            (_, signal) => signal(),\n          ),\n          fromEventPattern(\n            handler => table.onFieldDelete(handler),\n            (_, signal) => signal(),\n          ),\n        ]).pipe(\n          switchMap(() =>\n            combineLatest([\n              from(table.getFieldList()),\n              userSelection$.pipe(\n                map(({ fieldId, recordId }) => ({ fieldId, recordId })),\n                distinctUntilChanged(),\n              ),\n            ]).pipe(\n              switchMap(([fieldList, { fieldId, recordId }]) => {\n                const field = fieldList.find(({ id }) => id === fieldId);\n                return field && fieldId && recordId\n                  ? from(field.getType()).pipe(\n                      map(type => ({\n                        field,\n                        table,\n                        fieldType: type,\n                        fieldId,\n                        recordId,\n                      })),\n                    )\n                  : EMPTY;\n              }),\n              startWith(null),\n            ),\n          ),\n          startWith(null),\n        ),\n      ),\n      catchError(() => of(null)),\n      startWith(null),\n    ),\n  ),\n  distinctUntilChanged((p, c) =>\n    isEqual(\n      pick(p, ['fieldType', 'fieldId', 'recordId']),\n      pick(c, ['fieldType', 'fieldId', 'recordId']),\n    ),\n  ),\n  share(),\n);\n\nselection$.subscribe(cell => {\n  if (cell && cell.fieldType !== FieldType.Text) {\n    bitable.ui.showToast({\n      toastType: ToastType.warning,\n      message: i18n.t('text_field_only'),\n    });\n  }\n});\n\nexport type SelectionInfo = NonNullable<\n  typeof selection$ extends Observable<infer T> ? T : never\n>;\n","import { useObservable, useObservableState } from 'observable-hooks';\nimport {\n  BehaviorSubject,\n  combineLatestWith,\n  concatMap,\n  delay,\n  filter,\n  from,\n  map,\n  of,\n  pairwise,\n  skip,\n  startWith,\n  switchMap,\n} from 'rxjs';\nimport {\n  FieldType,\n  IField,\n  checkers,\n  IOpenSegmentType,\n  bitable,\n  IOpenCellValue,\n  ToastType,\n} from '@lark-base-open/js-sdk';\nimport type { AsyncReturnType } from 'type-fest';\nimport { FC, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport groupBy from 'lodash-es/groupBy';\nimport sortBy from 'lodash-es/sortBy';\nimport identity from 'lodash-es/identity';\nimport chunk from 'lodash-es/chunk';\nimport { Table, Button, Message } from '@arco-design/web-react';\nimport { ColumnProps } from '@arco-design/web-react/es/Table';\nimport { SegmentRender } from './segment-render';\nimport { Mode, SelectionInfo, config$, mode$, selection$ } from '@/rx';\nimport { Config, fix, test } from '@/api';\nimport i18n from '@/i18n';\n\ntype FieldValue = AsyncReturnType<IField['getFieldValueList']>[number];\n\nfunction transformValues(values: FieldValue[]) {\n  return values.flatMap(({ value, record_id }) => {\n    if (value && checkers.isSegments(value)) {\n      return value\n        .map(({ type, text }, index) => ({ type, text, index }))\n        .filter(({ type }) => type === IOpenSegmentType.Text)\n        .map(({ text, index }) => ({ text, record_id, index }));\n    }\n    return [];\n  });\n}\n\nasync function formatTest(\n  selection: SelectionInfo,\n  mode: Mode,\n  config: Config,\n) {\n  refreshing$.next(true);\n  const startTime = Date.now();\n  const fieldValues = await (mode === 'cell'\n    ? selection.table\n        .getCellValue(selection.fieldId, selection.recordId)\n        .then(value => [{ record_id: selection.recordId, value }])\n    : selection.field.getFieldValueList(''));\n\n  const transformedValues = transformValues(fieldValues);\n\n  const testResult = await test({\n    config,\n    texts: transformedValues.map(({ text }) => text),\n  });\n\n  console.log(`formatTest: ${Date.now() - startTime}ms`);\n  refreshing$.next(false);\n  return {\n    config: testResult.config,\n    result: Object.entries(\n      groupBy(\n        testResult.result\n          .map((rulesResult, index) => ({\n            rulesResult,\n            ...transformedValues[index],\n          }))\n          .filter(({ rulesResult }) => rulesResult.some(identity)),\n        'record_id',\n      ),\n    ).map(\n      ([recordId, items]) =>\n        ({ recordId, segments: sortBy(items, 'index') } as const),\n    ),\n  };\n}\n\nasync function fixCells(\n  { table, field, fieldId }: SelectionInfo,\n  config: (keyof Config)[],\n  key: 'ALL' | string,\n) {\n  const close = Message.loading({\n    duration: 60 * 60 * 1000,\n    content: i18n.t('fixing'),\n  });\n  const fieldValues = await (key !== 'ALL'\n    ? table\n        .getCellValue(fieldId, key)\n        .then(value => [{ record_id: key, value }])\n    : field.getFieldValueList(''));\n  const transformedValues = transformValues(fieldValues);\n  const { result } = await fix({\n    config: Object.fromEntries(config.map(rule => [rule, true])) as Config,\n    texts: transformedValues.map(({ text }) => text),\n  });\n  const fieldValuesMap: Record<string, IOpenCellValue | undefined> =\n    Object.fromEntries(\n      fieldValues.map(({ record_id, value }) => [record_id, value]),\n    );\n  const updateMap: Record<string, boolean> = {};\n\n  result.forEach((fixed, index) => {\n    if (fixed !== transformedValues[index].text) {\n      const segments = fieldValuesMap[transformedValues[index].record_id];\n      if (segments && checkers.isSegments(segments)) {\n        segments[transformedValues[index].index].text = fixed;\n      }\n      updateMap[transformedValues[index].record_id] = true;\n    }\n  });\n  await Promise.all(\n    chunk(\n      Object.keys(updateMap).filter(\n        recordId => updateMap[recordId] && fieldValuesMap[recordId],\n      ),\n      5000,\n    ).map(recordIds =>\n      table.setRecords(\n        recordIds.map(recordId => ({\n          recordId,\n          fields: { [fieldId]: fieldValuesMap[recordId]! },\n        })),\n      ),\n    ),\n  );\n  close();\n  refresh$.next(Date.now());\n  bitable.ui.showToast({\n    toastType: ToastType.success,\n    message: i18n.t('fix_success'),\n  });\n}\n\ntype FormatTestResult = AsyncReturnType<typeof formatTest>;\n\nconst refresh$ = new BehaviorSubject<number>(0);\nconst refreshing$ = new BehaviorSubject<boolean>(false);\n\nexport const Result = () => {\n  return useObservableState(\n    useObservable(() =>\n      selection$.pipe(\n        skip(1),\n        filter(sel => Boolean(sel) && sel?.fieldType === FieldType.Text),\n        combineLatestWith(mode$, config$, refresh$),\n        switchMap(([sel, mode, config]) => {\n          return from(formatTest(sel!, mode, config)).pipe(\n            map(props => <ResultTable {...props} selection={sel!} />),\n          );\n        }),\n      ),\n    ),\n    null,\n  );\n};\n\nconst ResultTable: FC<FormatTestResult & { selection: SelectionInfo }> = ({\n  result,\n  config,\n  selection,\n}) => {\n  const { t } = useTranslation();\n  const refreshing = useObservableState(\n    useObservable(() =>\n      refreshing$.pipe(\n        startWith(false),\n        pairwise(),\n        concatMap(([prev, curr]) => {\n          return prev && !curr ? of(false).pipe(delay(300)) : of(curr);\n        }),\n      ),\n    ),\n    false,\n  );\n\n  const columns = useMemo(\n    () =>\n      [\n        {\n          title: t('content'),\n          dataIndex: 'segments',\n          render: (_, item) => (\n            <div className=\"whitespace-pre-wrap break-all\">\n              {item.segments.map(segment => (\n                <SegmentRender\n                  {...segment}\n                  configs={config}\n                  key={segment.index}\n                />\n              ))}\n            </div>\n          ),\n        },\n        {\n          title: t('actions'),\n          render: (_, item) => (\n            <div className=\"whitespace-nowrap\">\n              <Button\n                size=\"mini\"\n                className=\"mr-2\"\n                onClick={() =>\n                  bitable.ui.showRecordDetailDialog({\n                    tableId: selection.table.id,\n                    recordId: item.recordId,\n                  })\n                }\n              >\n                {t('view')}\n              </Button>\n              <Button\n                size=\"mini\"\n                type=\"primary\"\n                onClick={() => fixCells(selection, config, item.recordId)}\n              >\n                {t('fix')}\n              </Button>\n            </div>\n          ),\n        },\n      ] as ColumnProps<FormatTestResult['result'][number]>[],\n    [t, config, selection],\n  );\n\n  return (\n    <>\n      <div className=\"gap-2 flex justify-end mb-3\">\n        <Button\n          onClick={() => refresh$.next(Date.now())}\n          loading={refreshing}\n          disabled={refreshing}\n        >\n          {t('refresh')}\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => fixCells(selection, config, 'ALL')}\n        >\n          {t('fix_all')}\n        </Button>\n      </div>\n      <Table data={result} columns={columns} rowKey=\"recordId\" />\n    </>\n  );\n};\n","import { useObservableEagerState } from 'observable-hooks';\nimport { useTranslation } from 'react-i18next';\nimport { Radio, Checkbox, Form } from '@arco-design/web-react';\nimport { Mode, config$, mode$ } from '@/rx';\nimport { CONFIG_LIST, Config } from '@/api';\n\nconst CheckboxGroup = Checkbox.Group;\n\nconst RadioGroup = Radio.Group;\n\nexport const Settings = () => {\n  const mode = useObservableEagerState(mode$);\n  const config = useObservableEagerState(config$);\n  const { t } = useTranslation();\n  return (\n    <Form>\n      <Form.Item label={t('format_target')}>\n        <RadioGroup\n          value={mode}\n          onChange={mode => mode$.next(mode as Mode)}\n          className=\"pr-4\"\n          direction=\"vertical\"\n        >\n          <Radio value=\"cell\">{t('cell')}</Radio>\n          <Radio value=\"field\">{t('field')}</Radio>\n        </RadioGroup>\n      </Form.Item>\n      <Form.Item label={t('format_rule')}>\n        <CheckboxGroup\n          options={CONFIG_LIST.map((rule, i) => ({\n            value: rule,\n            label: `${i + 1}. ${t(rule)}`,\n          }))}\n          value={Object.keys(config).filter(key => config[key as keyof Config])}\n          onChange={rules =>\n            config$.next(\n              Object.fromEntries(rules.map(rule => [rule, true])) as Config,\n            )\n          }\n          direction=\"vertical\"\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n","import { Result } from './result';\nimport { Settings } from './settings';\n\nexport const Sider = () => {\n  return (\n    <>\n      <div className=\"py-4 px-6\">\n        <Settings />\n        <Result />\n      </div>\n    </>\n  );\n};\n","import '@/i18n';\nimport { Sider } from '@/components/sider';\nimport './index.css';\n\nexport default () => {\n  return (\n    <div>\n      <Sider />\n    </div>\n  );\n};\n","window.__assetPrefix__ = '';"],"names":["i18n","initReactI18next","init","resources","zh","translation","no_space_around_full_width_punctuation","no_space_between_num_dp","space_between_ch_en","uniform_punctuation","content","view","fix","fix_all","actions","refresh","format_target","format_rule","text_field_only","cell","field","fixing","fix_success","en","ja","lng","fallbackLng","interpolation","escapeValue","bitable","bridge","getLanguage","then","finally","console","error","worker","Worker","URL","RUST_API","wrap","module","CONFIG_LIST","_ref","_asyncToGenerator","param","JSON","parse","stringify","_x","apply","arguments","test","_ref2","_x2","SegmentRender","text","rulesResult","configs","t","useTranslation","deltas","useMemo","flatMap","item","index","map","start","end","Delta","retain","indexOf","reduce","prev","curr","compose","insert","_jsx","_Fragment","children","op","rules","Object","keys","attributes","filter","key","_op$attributes","Number","length","_Tooltip","rule","join","className","mode$","BehaviorSubject","getData","mode","isEmpty","next","catch","pipe","distinctUntilChanged","subscribe","setData","config$","config","isEqual","userSelection$","from","base","getSelection","switchMap","selection","fromEventPattern","handler","onSelectionChange","data","_","signal","startWith","selection$","tableId","getTableById","table","merge","onFieldAdd","onFieldModify","onFieldDelete","combineLatest","getFieldList","fieldId","recordId","fieldList","find","id","getType","type","fieldType","EMPTY","catchError","of","p","c","pick","share","transformValues","values","value","record_id","checkers","isSegments","IOpenSegmentType","Text","_formatTest","refreshing$","startTime","Date","now","transformedValues","getCellValue","getFieldValueList","testResult","texts","log","result","entries","groupBy","_objectSpread","some","identity","items","segments","sortBy","fixCells","_x4","_x5","_x6","_fixCells","close","_Message","loading","duration","fieldValues","fromEntries","fieldValuesMap","updateMap","forEach","fixed","Promise","all","chunk","recordIds","setRecords","fields","refresh$","ui","showToast","toastType","ToastType","success","message","FieldType","warning","Result","useObservableState","useObservable","skip","sel","Boolean","combineLatestWith","_x3","formatTest","props","ResultTable","refreshing","pairwise","concatMap","delay","columns","title","dataIndex","render","segment","_createElement","_jsxs","_Button","size","onClick","showRecordDetailDialog","disabled","_Table","rowKey","CheckboxGroup","_Checkbox","Group","RadioGroup","_Radio","Settings","useObservableEagerState","_Form","Item","label","onChange","direction","options","i","Sider","window","__assetPrefix__"],"sourceRoot":""}